import Head from 'next/head';
import { Inter } from '@next/font/google';
import axios from 'axios';
import { DataGrid } from '@mui/x-data-grid';
import { useQuery } from '@tanstack/react-query';
import { useState } from 'react';

const inter = Inter({ subsets: ['latin'] });

const column = [
  { field: 'id', headerName: 'Known ID', width: 90 },
  { field: 'mandate', headerName: 'Mandate' },
  { field: 'authcode', headerName: 'Authentication Code', width: 150 },
  { field: 'phone', headerName: 'Phone', width: 130 },
  { field: 'tenure', headerName: 'Tenure' },
  { field: 'amount', headerName: 'Amount' },
  { field: 'interest', headerName: 'Interest' },
  { field: 'outstanding', headerName: 'Outstanding' },
  { field: 'repayment', headerName: 'Repayment' },
  { field: 'ramount', headerName: 'RRR Amount' },
  { field: 'Rrepayment', headerName: 'RRR Repayment' },
  { field: 'status', headerName: 'Status', width: 85 },
  { field: 'rtenure', headerName: 'RRR Tenure' },
  { field: 'routstanding', headerName: 'RRR Outstanding' },
  { field: 'verdict', headerName: 'Verdict', width: 80 },
];

export default function Home() {
  const { isLoading, error, data } = useQuery({
    queryKey: ['Repodata'],
    queryFn: async () => {
      const { data } = await axios.get('http://localhost:3001/data');
      return data;
    },
  });

  const { data: rData } = useQuery({
    queryKey: ['remData'],
    queryFn: async () => {
      const { data } = await axios.get('http://localhost:3003/data');
      return data;
    },
  });
  // interface tables {
  //   id: number;
  //   mandate: string;
  // }

  const table: any[] = [];
  data?.forEach((datas: any) => {
    table.push(datas);
  });
  const remData = data?.concat(rData);

  const remId = rData?.map((s: { id: any }) => s.id);
  const key = data?.map((l: { id: any }) => l.id);
  const handleClick = () => {
    if (key !== remId) {
      return {data}
    } else {
      return { remData };
    }
  };
  
  console.log(remData.length);

  let sum = 0;
  data?.forEach((num: { amount: number }) => {
    sum += num.amount;
  });
  let pay = 0;
  data?.forEach((num: { repayment: number }) => {
    pay += num.repayment;
  });
  if (isLoading) {
    return <p>Loading</p>;
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen w-full flex flex-col justify-center items-center mt-16">
        <p className="text-6xl text-blue- my-12">Reconciliation Dashboard</p>
        <div className="w-[90%] flex flex-row justify-between items-center my-8">
          <div className="flex gap-4 items-center">
            <p className="text-center text-2xl">Total Amount</p>
            <button
              className="border-2 py-2 px-5 bg-blue-500 text-white text-lg 
            rounded-md shadow-sm hover:bg-blue-300 hover:shadow-lg"
            >
              {sum}
            </button>
            <p className="text-center text-2xl">Total Repayment</p>
            <button
              className="border-2 py-2 px-5 bg-blue-500 text-white text-lg 
            rounded-md shadow-sm hover:bg-blue-300 hover:shadow-lg"
            >
              {pay}
            </button>
          </div>
          <div
            className="border-2 py-2 px-5 bg-orange-400 text-white text-lg 
            rounded-md shadow-sm hover:bg-orange-300 hover:shadow-lg"
            onClick={handleClick}
          >
            Load
          </div>
        </div>
        <div className="h-screen w-[90%] flex-shrink">
          <DataGrid
            rows={data}
            columns={column}
            initialState={{
              pagination: {
                pageSize: 10,
              },
            }}
          />
        </div>
      </main>
    </>
  );
}
